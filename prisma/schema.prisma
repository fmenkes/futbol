datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map(name: "email_verified")
  image         String?
  role          UserRole     @default(BASIC)
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @default(now()) @map(name: "updated_at")
  predictions   Prediction[] @relation("user")
  scores        Int[]

  @@map(name: "users")
}

model Prediction {
  id              Int              @id @default(autoincrement())
  userId          Int              @map(name: "user_id")
  user            User             @relation("user", fields: [userId], references: [id])
  matchId         Int              @map(name: "match_id")
  match           Match            @relation("match", fields: [matchId], references: [id])
  homeTeamGoals   Int?             @map(name: "home_team_goals")
  awayTeamGoals   Int?             @map(name: "away_team_goals")
  projectedResult ProjectedResult? @map(name: "projected_result")
  result          PredictionResult @default(INCOMPLETE)

  @@unique([userId, matchId], name: "UserMatchKey")
}

enum ProjectedResult {
  HOME_TEAM
  DRAW
  AWAY_TEAM
}

enum PredictionResult {
  INCOMPLETE
  INCORRECT
  PARTIAL
  CORRECT
}

enum UserRole {
  BASIC
  ADMIN
}

model AdminSettings {
  id            Int      @id @default(autoincrement())
  allowedEmails String[]
  partialPoints Int? @map(name: "partial_points")
  correctPoints Int? @map(name: "correct_points")
}

model Match {
  id            Int          @id
  utcDate       DateTime     @map(name: "utc_date")
  status        MatchStatus
  matchday      Int?
  stage         Stage
  group         String?
  homeTeamId    Int?         @map(name: "home_team_id")
  homeTeam      Team?        @relation("home_team", fields: [homeTeamId], references: [id])
  awayTeamId    Int?         @map(name: "away_team_id")
  awayTeam      Team?        @relation("away_team", fields: [awayTeamId], references: [id])
  homeTeamGoals Int          @default(0) @map(name: "home_team_goals")
  awayTeamGoals Int          @default(0) @map(name: "away_team_goals")
  winnerId      Int?         @map(name: "winner_id")
  winner        Team?        @relation("winning_team", fields: [winnerId], references: [id])
  draw          Boolean      @default(false)
  predictions   Prediction[] @relation("match")
}

model Team {
  id          Int     @id
  name        String
  countryCode String? @map(name: "country_code")
  homeMatches Match[] @relation("home_team")
  awayMatches Match[] @relation("away_team")
  wonMatches  Match[] @relation("winning_team")
}

enum Stage {
  GROUP_STAGE
  LAST_16
  QUARTER_FINAL
  SEMI_FINAL
  FINAL
}

enum MatchStatus {
  SCHEDULED
  POSTPONED
  SUSPENDED
  CANCELED
  PAUSED
  IN_PLAY
  AWARDED
  FINISHED
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}
